ProgDef. Program ::= [Definition] ;
terminator Definition "";

Func. Definition ::= DataType Identifier Args FunctionBody ;
Using. Definition ::= "using" QConst ";" ;

FBody. FunctionBody  ::= "{" [Stm] "}" ;
terminator Stm "" ;

Argument. Argument ::= DataType Identifier ;

ArgumentList. Args ::= "(" [Argument] ")" ;
separator Argument ",";

ExpStatement.   Stm ::= Exp ";" ;
RetStatement.   Stm ::= "return" Exp ";" ;
VarDec.         Stm ::= DataType [Dec] ";" ;
While. 			Stm ::= "while" "(" Exp ")" Stm ;
DoWhile. 		Stm ::= "do" Stm "while" "(" Exp ")" ";" ;
Condit. 		Stm ::= Conditional;
Curls. 			Stm ::= "{" [Stm] "}" ;
TypeDef. 		Stm ::= "typedef" DataType Identifier ;
separator nonempty Dec "," ;

If. 	Conditional ::= "if" "(" Exp ")" Stm ;
IfElse. Conditional ::= "if" "(" Exp ")" Stm "else" Stm ;

Dec. Dec ::= Identifier ;
Def. Dec ::= Identifier "=" Exp ;


EDAs.       Exp2  ::= Identifier "-+" Exp2 ;
EIAs.       Exp2  ::= Identifier "+=" Exp2 ;
EAss.       Exp2  ::= Identifier "=" Exp2 ;
ENeq        Exp8  ::= Exp8 "!=" Exp9;
EEq.        Exp8  ::= Exp8 "==" Exp9;
ELS.        Exp10 ::= Exp10 "<<" Exp11 ;
ERS.        Exp10 ::= Exp10 ">>" Exp11 ;
EAdd.       Exp11 ::= Exp11 "+" Exp12;
ESub.       Exp11 ::= Exp11 "-" Exp12;
EMul.       Exp12 ::= Exp12 "*" Exp13;
EDiv.       Exp12 ::= Exp12 "/" Exp13;
ERem.       Exp12 ::= Exp12 "%" Exp13;
Arrow.      Exp14 ::= Exp14 "->" Exp15 ;
Dot.        Exp14 ::= Exp14 "." Exp15 ;
Indx.       Exp15 ::= Exp15 "[" Exp16 "]" ;
FuncCall.   Exp15 ::= Identifier "(" [Exp16] ")" ;
EQC.        Exp16 ::= [QConst] ;
ELit.       Exp16 ::= Lit ;
separator Exp "," ;
separator nonempty QConst "," ;

coercions Exp 16 ;

Arrow. StProj ::= Exp "->" Exp ;
Dot.   StProj ::= Exp "." Exp ;

Int.    DataType ::= "int" ;
Bool.   DataType ::= "bool" ;
Char.   DataType ::= "char" ;
String. DataType ::= "string" ;
Double. DataType ::= "double" ;
Float. 	DataType ::= "float" ;
Void.   DataType ::= "void" ;
QConst1. DataType ::= QConst ; --is ok?


QConst.    QConst ::= [Identifier] ;
separator nonempty Identifier "::" ;

LInt. Lit ::= Integer ;
LFloat. Lit ::= Double ;
LString. Lit ::= String ;

position token Identifier (letter ( letter | digit | '_')*) ;


comment "#" ;
comment "//" ;
comment "/*" "*/" ;