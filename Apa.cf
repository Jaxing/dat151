ProgDef. Program ::= [Definition] ;
terminator Definition "";

Func. Definition ::= DataType Identifier Args FunctionBody ;
Using. Definition ::= "using" QConst ";" ;
DeftypeDef. Definition ::= TypeDef ;
Vardec.     Definition ::= VarDec ";" ;

FBody. 		FunctionBody  ::= "{" [Stm] "}" ;
EmptyBody. 	FunctionBody ::= ";" ;
terminator Stm "" ;

TypeDec.  Argument ::= DataType ;
Argument. Argument ::= DataType Dec ;
ConstArg. Argument ::= "const" DataType;
ConstDec. Argument ::= "const" DataType Dec ;


ArgumentList. Args ::= "(" [Argument] ")" ;
separator Argument ",";

ExpStatement.   Stm ::= Exp ";" ;
RetStatement.   Stm ::= "return" Exp ";" ;
VarDeDec.       Stm ::= VarDec ";" ;
While. 			Stm ::= "while" "(" Exp ")" Stm ;
DoWhile. 		Stm ::= "do" Stm "while" "(" Exp ")" ";" ;
For. 			Stm ::= "for" "(" VarDec ";" Exp ";" Exp ")" Stm ;
Condit. 		Stm ::= Conditional;
Curls. 			Stm ::= "{" [Stm] "}" ;
StmTypeDef. 	Stm ::= TypeDef ;
separator nonempty Dec "," ;

TypeDef. TypeDef ::= "typedef" DataType Identifier ";" ;

VarDec.         VarDec ::= DataType [Dec] ;
ConstVarDec.    VarDec ::= "const" DataType [Dec] ;
separator nonempty Dec "," ;

If. 	Conditional ::= "if" "(" Exp ")" Stm ;
IfElse. Conditional ::= "if" "(" Exp ")" Stm "else" Stm ;

Dec. Dec ::= Identifier ;
Def. Dec ::= Identifier "=" Exp ;


EThrow.		Exp1  ::= "throw" Exp1 ;
ECond.      Exp2  ::= Exp2 "?" Exp3 ":" Exp3 ;
EDAs.       Exp2  ::= Exp2 "-=" Exp2 ;
EIAs.       Exp2  ::= Exp2 "+=" Exp2 ;
EAss.       Exp2  ::= Exp2 "=" Exp2 ;
EDis.		Exp3  ::= Exp3 "||" Exp4 ;
ECon. 		Exp4  ::= Exp4 "&&" Exp5 ;
ENeq.       Exp8  ::= Exp8 "!=" Exp9;
EEq.        Exp8  ::= Exp8 "==" Exp9;
ELT. 		Exp9  ::= Exp9 "<" Exp10 ;
EGT. 		Exp9  ::= Exp9 ">" Exp10 ;
ELeq. 		Exp9  ::= Exp9 "<=" Exp10 ;
EGeq. 		Exp9  ::= Exp9 ">=" Exp10 ;
ELS.        Exp10 ::= Exp10 "<<" Exp11 ;
ERS.        Exp10 ::= Exp10 ">>" Exp11 ;
EAdd.       Exp11 ::= Exp11 "+" Exp12;
ESub.       Exp11 ::= Exp11 "-" Exp12;
EMul.       Exp12 ::= Exp12 "*" Exp13;
EDiv.       Exp12 ::= Exp12 "/" Exp13;
ERem.       Exp12 ::= Exp12 "%" Exp13;
EPPE. 		Exp13 ::= "++" Exp13 ;
EMME. 		Exp13 ::= "--" Exp13 ;
EEPP. 		Exp13 ::= Exp13 "++" ;
EEMM. 		Exp13 ::= Exp13 "--" ;
EDRF.		Exp13 ::= "*" Exp13 ;
ENeg.		Exp13 ::= "!" Exp13 ;
Arrow.      Exp14 ::= Exp14 "->" Exp15 ;
Dot.        Exp14 ::= Exp14 "." Exp15 ;
Indx.       Exp15 ::= Exp15 "[" Exp "]" ;
FuncCall.   Exp15 ::= Exp15 "(" [Exp1] ")" ;
EQC.        Exp16 ::= QConst ;
ELit.       Exp16 ::= Lit ;
separator Exp1 "," ;
coercions Exp 16 ;

Int.    DataType ::= "int" ;
Bool.   DataType ::= "bool" ;
Char.   DataType ::= "char" ;
Double. DataType ::= "double" ;
Float. 	DataType ::= "float" ;
Void.   DataType ::= "void" ;
QConst1. DataType ::= QConst ; --is ok?
Ref.	DataType ::= DataType "&" ;


QConst.    QConst ::= [Identifier] ;
separator nonempty Identifier "::" ;

LInt. Lit ::= Integer ;
LFloat. Lit ::= Double ;
LChar. Lit ::= Char ;
LString. Lit ::= [StringPrime] ;
separator nonempty StringPrime "\n";

ConcSpace. StringPrime  ::= String  StringPrime ;
Base.      StringPrime  ::= String ;


position token Identifier (letter ( letter | digit | '_')*) ;


comment "#" ;
comment "//" ;
comment "/*" "*/" ;