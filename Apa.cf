ProgDef. Program ::= [Definition] ;
terminator Definition "";

Func. Definition ::= DataType Identifier Args FunctionBody ;
Using. Definition ::= "using" QConst ";" ;

FBody. FunctionBody  ::= "{" [Stm] "}" ;
terminator Stm "" ;

Argument. Argument ::= DataType Identifier ;

ArgumentList. Args ::= "(" [Argument] ")" ;
separator Argument ",";

ExpStatement.   Stm ::= Exp ";" ;
RetStatement.   Stm ::= "return" Exp ";" ;
VarDec.         Stm ::= DataType [Dec] ";" ;
separator nonempty Dec "," ;

Dec. Dec ::= Identifier ;
Def. Dec ::= Identifier "=" Exp ;


ELS.  Exp 	::= Exp "<<" Exp1 ;
ERS.  Exp 	::= Exp ">>" Exp1 ;
EQC.  Exp1 	::= [QConst] ;
ELit. Exp1	::= Lit ;
separator nonempty QConst "," ;

coercions Exp 1 ;

Int.    DataType ::= "int" ;
Bool.   DataType ::= "bool" ;
Char.   DataType ::= "char" ;
Double. DataType ::= "double" ;
Void.   DataType ::= "void" ;
QConst1. DataType ::= QConst ; --is ok?


QConst.    QConst ::= [Identifier] ;
separator nonempty Identifier "::" ;

LInt. Lit ::= Integer ;
LString. Lit ::= String ;

position token Identifier (letter ( letter | digit | '_')*) ;


comment "#" ;
comment "//" ;
comment "/*" "*/" ;